'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var fiber = require('@react-three/fiber');
var create = _interopDefault(require('zustand'));
var ReactDOM = require('react-dom');
var three = require('three');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectDestructuringEmpty(obj) {
  if (obj == null) throw new TypeError("Cannot destructure undefined");
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var useAnnounceStore = /*#__PURE__*/create(function (set) {
  return {
    message: '',
    a11yScreenReader: function a11yScreenReader(message) {
      set(function () {
        return {
          message: message
        };
      });
    }
  };
});

var stylesHiddenButScreenreadable = {
  opacity: 0,
  borderRadius: '50%',
  width: '50px',
  height: '50px',
  overflow: 'hidden',
  transform: 'translateX(-50%) translateY(-50%)',
  display: 'inline-block',
  userSelect: 'none',
  WebkitUserSelect: 'none',
  WebkitTouchCallout: 'none',
  margin: 0
};

var A11ySectionContext = /*#__PURE__*/React__default.createContext( /*#__PURE__*/React.createRef());
A11ySectionContext.displayName = 'A11ySectionContext';

var useA11ySectionContext = function useA11ySectionContext() {
  return React.useContext(A11ySectionContext);
};
var A11ySection = function A11ySection(_ref) {
  var children = _ref.children,
      label = _ref.label,
      description = _ref.description;
  var ref = React.useRef(null);
  var refpDesc = React.useRef(null);
  var gl = fiber.useThree(function (state) {
    return state.gl;
  });

  var _React$useState = React__default.useState(function () {
    return document.createElement('section');
  }),
      el = _React$useState[0];

  var target = gl.domElement.parentNode;
  React.useEffect(function () {
    // eslint-disable-next-line react-hooks/exhaustive-deps
    if (label) {
      el.setAttribute('aria-label', label);
    }

    el.setAttribute('r3f-a11y', 'true');
    el.setAttribute('style', function (styles) {
      return Object.keys(styles).reduce(function (acc, key) {
        return acc + key.split(/(?=[A-Z])/).join('-').toLowerCase() + ':' + styles[key] + ';';
      }, '');
    }(stylesHiddenButScreenreadable));

    if (description) {
      if (refpDesc.current === null) {
        var pDesc = document.createElement('p');
        pDesc.innerHTML = description;
        pDesc.style.cssText = 'border: 0!important;clip: rect(1px,1px,1px,1px)!important;-webkit-clip-path: inset(50%)!important;clip-path: inset(50%)!important;height: 1px!important;margin: -1px!important;overflow: hidden!important;padding: 0!important;position: absolute!important;width: 1px!important;white-space: nowrap!important;';
        el.prepend(pDesc);
        refpDesc.current = pDesc;
      } else {
        refpDesc.current.innerHTML = description;
      }
    }

    return function () {
      if (target) target.removeChild(el);
    };
  }, [description, label]);

  if (ref.current === null) {
    if (target) {
      target.appendChild(el);
    }

    ref.current = el;
  }

  return React__default.createElement(React__default.Fragment, null, React__default.createElement(A11ySectionContext.Provider, {
    value: ref
  }, children));
};

var v1 = /*#__PURE__*/new three.Vector3();
var v2 = /*#__PURE__*/new three.Vector3();
var v3 = /*#__PURE__*/new three.Vector3();

function calculatePosition(el, camera, size) {
  var objectPos = v1.setFromMatrixPosition(el.matrixWorld);
  objectPos.project(camera);
  var widthHalf = size.width / 2;
  var heightHalf = size.height / 2;
  return [objectPos.x * widthHalf + widthHalf, -(objectPos.y * heightHalf) + heightHalf];
}

function isObjectBehindCamera(el, camera) {
  var objectPos = v1.setFromMatrixPosition(el.matrixWorld);
  var cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
  var deltaCamObj = objectPos.sub(cameraPos);
  var camDir = camera.getWorldDirection(v3);
  return deltaCamObj.angleTo(camDir) > Math.PI / 2;
}

function objectZIndex(el, camera, zIndexRange) {
  if (camera instanceof three.PerspectiveCamera || camera instanceof three.OrthographicCamera) {
    var objectPos = v1.setFromMatrixPosition(el.matrixWorld);
    var cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
    var dist = objectPos.distanceTo(cameraPos);
    var A = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);
    var B = zIndexRange[1] - A * camera.far;
    return Math.round(A * dist + B);
  }

  return undefined;
}

var Html = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _portal$current;

  var children = _ref.children,
      _ref$eps = _ref.eps,
      eps = _ref$eps === void 0 ? 0.001 : _ref$eps,
      style = _ref.style,
      className = _ref.className,
      portal = _ref.portal,
      _ref$zIndexRange = _ref.zIndexRange,
      zIndexRange = _ref$zIndexRange === void 0 ? [16777271, 0] : _ref$zIndexRange,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "eps", "style", "className", "portal", "zIndexRange"]);

  var gl = fiber.useThree(function (_ref2) {
    var gl = _ref2.gl;
    return gl;
  });
  var camera = fiber.useThree(function (_ref3) {
    var camera = _ref3.camera;
    return camera;
  });
  var scene = fiber.useThree(function (_ref4) {
    var scene = _ref4.scene;
    return scene;
  });
  var size = fiber.useThree(function (_ref5) {
    var size = _ref5.size;
    return size;
  });

  var _React$useState = React.useState(function () {
    return document.createElement('div');
  }),
      el = _React$useState[0];

  var group = React.useRef(null);
  var oldZoom = React.useRef(0);
  var oldPosition = React.useRef([0, 0]);
  var target = (_portal$current = portal == null ? void 0 : portal.current) != null ? _portal$current : gl.domElement.parentNode;
  React.useEffect(function () {
    if (group.current) {
      scene.updateMatrixWorld();
      var vec = calculatePosition(group.current, camera, size);
      el.style.cssText = "position:absolute;top:0;left:0;transform:translate3d(" + vec[0] + "px," + vec[1] + "px,0);transform-origin:0 0;";

      if (target) {
        target.appendChild(el);
      }

      return function () {
        if (target) target.removeChild(el);
        ReactDOM.unmountComponentAtNode(el);
      };
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [target]);
  var styles = React.useMemo(function () {
    return _extends({
      position: 'absolute',
      transform: 'none'
    }, style);
  }, [style, size]);
  React.useLayoutEffect(function () {
    ReactDOM.render(React.createElement("div", {
      ref: ref,
      style: styles,
      className: className,
      children: children
    }), el);
  });
  fiber.useFrame(function () {
    if (group.current) {
      camera.updateMatrixWorld();
      var vec = calculatePosition(group.current, camera, size);

      if (Math.abs(oldZoom.current - camera.zoom) > eps || Math.abs(oldPosition.current[0] - vec[0]) > eps || Math.abs(oldPosition.current[1] - vec[1]) > eps) {
        el.style.display = !isObjectBehindCamera(group.current, camera) ? 'block' : 'none';
        el.style.zIndex = "" + objectZIndex(group.current, camera, zIndexRange);
        el.style.transform = "translate3d(" + vec[0] + "px," + vec[1] + "px,0) scale(1)";
        oldPosition.current = vec;
        oldZoom.current = camera.zoom;
      }
    }
  });
  return React.createElement("group", Object.assign({}, props, {
    ref: group
  }));
});

var A11yContext = /*#__PURE__*/React__default.createContext({
  focus: false,
  hover: false,
  pressed: false
});
A11yContext.displayName = 'A11yContext';

var useA11y = function useA11y() {
  return React.useContext(A11yContext);
};
var A11y = function A11y(_ref) {
  var children = _ref.children,
      description = _ref.description,
      activationMsg = _ref.activationMsg,
      deactivationMsg = _ref.deactivationMsg,
      tabIndex = _ref.tabIndex,
      href = _ref.href,
      role = _ref.role,
      _ref$showAltText = _ref.showAltText,
      showAltText = _ref$showAltText === void 0 ? false : _ref$showAltText,
      actionCall = _ref.actionCall,
      focusCall = _ref.focusCall,
      disabled = _ref.disabled,
      _ref$debug = _ref.debug,
      debug = _ref$debug === void 0 ? false : _ref$debug,
      a11yElStyle = _ref.a11yElStyle,
      _ref$startPressed = _ref.startPressed,
      startPressed = _ref$startPressed === void 0 ? false : _ref$startPressed,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'p' : _ref$tag,
      _ref$hidden = _ref.hidden,
      hidden = _ref$hidden === void 0 ? false : _ref$hidden,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "description", "activationMsg", "deactivationMsg", "tabIndex", "href", "role", "showAltText", "actionCall", "focusCall", "disabled", "debug", "a11yElStyle", "startPressed", "tag", "hidden"]);

  var constHiddenButScreenreadable = Object.assign({}, stylesHiddenButScreenreadable, {
    opacity: debug ? 1 : 0
  }, a11yElStyle);

  var _useState = React.useState({
    hovered: false,
    focused: false,
    pressed: startPressed ? startPressed : false
  }),
      a11yState = _useState[0],
      setA11yState = _useState[1];

  var a11yScreenReader = useAnnounceStore(function (state) {
    return state.a11yScreenReader;
  });
  var overHtml = React.useRef(false);
  var overMesh = React.useRef(false);
  var domElement = fiber.useThree(function (state) {
    return state.gl.domElement;
  }); // temporary fix to prevent error -> keep track of our component's mounted state

  var componentIsMounted = React.useRef(true);
  React.useEffect(function () {
    return function () {
      domElement.style.cursor = 'default';
      componentIsMounted.current = false;
    };
  }, []); // Using an empty dependency array ensures this on

  React__default.Children.only(children); // @ts-ignore

  var handleOnPointerOver = function handleOnPointerOver(e) {
    if (e.eventObject) {
      overMesh.current = true;
    } else {
      overHtml.current = true;
    }

    if (overHtml.current || overMesh.current) {
      if (role !== 'content' && role !== 'image' && !disabled) {
        domElement.style.cursor = 'pointer';
      }

      setA11yState({
        hovered: true,
        focused: a11yState.focused,
        pressed: a11yState.pressed
      });
    }
  }; // @ts-ignore


  var handleOnPointerOut = function handleOnPointerOut(e) {
    if (e.eventObject) {
      overMesh.current = false;
    } else {
      overHtml.current = false;
    }

    if (!overHtml.current && !overMesh.current) {
      if (componentIsMounted.current) {
        domElement.style.cursor = 'default';
        setA11yState({
          hovered: false,
          focused: a11yState.focused,
          pressed: a11yState.pressed
        });
      }
    }
  };

  function handleBtnClick() {
    //msg is the same need to be clean for it to trigger again in case of multiple press in a row
    a11yScreenReader('');
    window.setTimeout(function () {
      if (typeof activationMsg === 'string') a11yScreenReader(activationMsg);
    }, 100);
    if (typeof actionCall === 'function') actionCall();
  }

  function handleToggleBtnClick() {
    if (a11yState.pressed) {
      if (typeof deactivationMsg === 'string') a11yScreenReader(deactivationMsg);
    } else {
      if (typeof activationMsg === 'string') a11yScreenReader(activationMsg);
    }

    setA11yState({
      hovered: a11yState.hovered,
      focused: a11yState.focused,
      pressed: !a11yState.pressed
    });
    if (typeof actionCall === 'function') actionCall();
  }

  var returnHtmlA11yEl = function returnHtmlA11yEl() {
    if (role === 'button' || role === 'togglebutton') {
      var disabledBtnAttr = disabled ? {
        disabled: true
      } : null;

      if (role === 'togglebutton') {
        return React__default.createElement("button", Object.assign({
          "r3f-a11y": "true"
        }, disabledBtnAttr, {
          "aria-pressed": a11yState.pressed ? 'true' : 'false',
          tabIndex: tabIndex ? tabIndex : 0,
          style: Object.assign(constHiddenButScreenreadable, disabled ? {
            cursor: 'default'
          } : {
            cursor: 'pointer'
          }, hidden ? {
            visibility: 'hidden'
          } : {
            visibility: 'visible'
          }),
          onPointerOver: handleOnPointerOver,
          onPointerOut: handleOnPointerOut,
          onClick: function onClick(e) {
            e.stopPropagation();

            if (disabled) {
              return;
            }

            handleToggleBtnClick();
          },
          onFocus: function onFocus() {
            if (typeof focusCall === 'function') focusCall();
            setA11yState({
              hovered: a11yState.hovered,
              focused: true,
              pressed: a11yState.pressed
            });
          },
          onBlur: function onBlur() {
            setA11yState({
              hovered: a11yState.hovered,
              focused: false,
              pressed: a11yState.pressed
            });
          }
        }), description);
      } else {
        //regular btn
        return React__default.createElement("button", Object.assign({
          "r3f-a11y": "true"
        }, disabledBtnAttr, {
          tabIndex: tabIndex ? tabIndex : 0,
          style: Object.assign(constHiddenButScreenreadable, disabled ? {
            cursor: 'default'
          } : {
            cursor: 'pointer'
          }, hidden ? {
            visibility: 'hidden'
          } : {
            visibility: 'visible'
          }),
          onPointerOver: handleOnPointerOver,
          onPointerOut: handleOnPointerOut,
          onClick: function onClick(e) {
            e.stopPropagation();

            if (disabled) {
              return;
            }

            handleBtnClick();
          },
          onFocus: function onFocus() {
            if (typeof focusCall === 'function') focusCall();
            setA11yState({
              hovered: a11yState.hovered,
              focused: true,
              pressed: a11yState.pressed
            });
          },
          onBlur: function onBlur() {
            setA11yState({
              hovered: a11yState.hovered,
              focused: false,
              pressed: a11yState.pressed
            });
          }
        }), description);
      }
    } else if (role === 'link') {
      return React__default.createElement("a", {
        "r3f-a11y": "true",
        style: Object.assign(constHiddenButScreenreadable, hidden ? {
          visibility: 'hidden'
        } : {
          visibility: 'visible'
        }),
        href: href,
        onPointerOver: handleOnPointerOver,
        onPointerOut: handleOnPointerOut,
        onClick: function onClick(e) {
          e.stopPropagation();
          e.preventDefault();
          if (typeof actionCall === 'function') actionCall();
        },
        onFocus: function onFocus() {
          if (typeof focusCall === 'function') focusCall();
          setA11yState({
            hovered: a11yState.hovered,
            focused: true,
            pressed: a11yState.pressed
          });
        },
        onBlur: function onBlur() {
          setA11yState({
            hovered: a11yState.hovered,
            focused: false,
            pressed: a11yState.pressed
          });
        }
      }, description);
    } else {
      var tabIndexP = tabIndex ? {
        tabIndex: tabIndex
      } : null;

      if (role === 'image') {
        return React__default.createElement("img", Object.assign({
          "r3f-a11y": "true",
          src: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'/%3E",
          alt: description
        }, tabIndexP, {
          style: Object.assign(constHiddenButScreenreadable, hidden ? {
            visibility: 'hidden'
          } : {
            visibility: 'visible'
          }),
          onPointerOver: handleOnPointerOver,
          onPointerOut: handleOnPointerOut,
          onBlur: function onBlur() {
            setA11yState({
              hovered: a11yState.hovered,
              focused: false,
              pressed: a11yState.pressed
            });
          },
          onFocus: function onFocus() {
            if (typeof focusCall === 'function') focusCall();
            setA11yState({
              hovered: a11yState.hovered,
              focused: true,
              pressed: a11yState.pressed
            });
          }
        }));
      } else {
        var Tag = tag;
        return React__default.createElement(Tag, Object.assign({
          "r3f-a11y": "true"
        }, tabIndexP, {
          style: Object.assign(constHiddenButScreenreadable, hidden ? {
            visibility: 'hidden'
          } : {
            visibility: 'visible'
          }),
          onPointerOver: handleOnPointerOver,
          onPointerOut: handleOnPointerOut,
          onBlur: function onBlur() {
            setA11yState({
              hovered: a11yState.hovered,
              focused: false,
              pressed: a11yState.pressed
            });
          },
          onFocus: function onFocus() {
            if (typeof focusCall === 'function') focusCall();
            setA11yState({
              hovered: a11yState.hovered,
              focused: true,
              pressed: a11yState.pressed
            });
          }
        }), description);
      }
    }
  };

  var HtmlAccessibleElement = React__default.useMemo(returnHtmlA11yEl, [description, a11yState, hidden, tabIndex, href, disabled, startPressed, tag, actionCall, focusCall]);
  var AltText = null;

  if (showAltText && a11yState.hovered) {
    AltText = React__default.createElement("div", {
      "aria-hidden": true,
      style: {
        width: 'auto',
        maxWidth: '300px',
        display: 'block',
        position: 'absolute',
        top: '0px',
        left: '0px',
        transform: 'translate(-50%,-50%)',
        background: 'white',
        borderRadius: '4px',
        padding: '4px'
      }
    }, React__default.createElement("p", {
      "aria-hidden": true,
      style: {
        margin: '0px'
      }
    }, description));
  }

  var section = useA11ySectionContext();
  var portal = {};

  if (section.current instanceof HTMLElement) {
    portal = {
      portal: section
    };
  }

  return React__default.createElement(A11yContext.Provider, {
    value: {
      hover: a11yState.hovered,
      focus: a11yState.focused,
      pressed: a11yState.pressed
    }
  }, React__default.createElement("group", Object.assign({}, props, {
    onClick: function onClick(e) {
      e.stopPropagation();

      if (disabled) {
        return;
      }

      if (role === 'button') {
        handleBtnClick();
      } else if (role === 'togglebutton') {
        handleToggleBtnClick();
      } else {
        if (typeof actionCall === 'function') actionCall();
      }
    },
    onPointerOver: handleOnPointerOver,
    onPointerOut: handleOnPointerOut
  }), children, React__default.createElement(Html, Object.assign({
    style: {
      width: '0px'
    },
    position: // @ts-ignore
    children.props.position ? children.props.position : 0
  }, portal), AltText, HtmlAccessibleElement)));
};

var A11yUserPreferencesContext = /*#__PURE__*/React__default.createContext({
  a11yPrefersState: {
    prefersReducedMotion: false,
    prefersDarkScheme: false
  },
  // tslint:disable:no-unused-variable
  setA11yPrefersState: function setA11yPrefersState(_state) {}
});
A11yUserPreferencesContext.displayName = 'A11yUserPreferencesContext';

var useUserPreferences = function useUserPreferences() {
  return React.useContext(A11yUserPreferencesContext);
};
var A11yUserPreferences = function A11yUserPreferences(_ref) {
  var children = _ref.children;

  var _useState = React.useState({
    prefersReducedMotion: false,
    prefersDarkScheme: false
  }),
      a11yPrefersState = _useState[0],
      setA11yPrefersState = _useState[1];

  React.useEffect(function () {
    var prefersReducedMotionMediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
    var prefersDarkSchemeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    setA11yPrefersState({
      prefersReducedMotion: prefersReducedMotionMediaQuery.matches,
      prefersDarkScheme: prefersDarkSchemeMediaQuery.matches
    });

    var handleReducedMotionPrefChange = function handleReducedMotionPrefChange(e) {
      setA11yPrefersState({
        prefersReducedMotion: e.matches,
        prefersDarkScheme: prefersDarkSchemeMediaQuery.matches
      });
    };

    var handleDarkSchemePrefChange = function handleDarkSchemePrefChange(e) {
      setA11yPrefersState({
        prefersReducedMotion: prefersReducedMotionMediaQuery.matches,
        prefersDarkScheme: e.matches
      });
    };

    if (typeof prefersReducedMotionMediaQuery.addEventListener === 'function') {
      prefersReducedMotionMediaQuery.addEventListener('change', handleReducedMotionPrefChange);
    }

    if (typeof prefersDarkSchemeMediaQuery.addEventListener === 'function') {
      prefersDarkSchemeMediaQuery.addEventListener('change', handleDarkSchemePrefChange);
    }

    return function () {
      if (typeof prefersReducedMotionMediaQuery.removeEventListener === 'function') {
        prefersReducedMotionMediaQuery.removeEventListener('change', handleReducedMotionPrefChange);
      }

      if (typeof prefersDarkSchemeMediaQuery.removeEventListener === 'function') {
        prefersDarkSchemeMediaQuery.removeEventListener('change', handleDarkSchemePrefChange);
      }
    };
  }, []);
  return React__default.createElement(A11yUserPreferencesContext.Provider, {
    value: {
      a11yPrefersState: {
        prefersReducedMotion: a11yPrefersState.prefersReducedMotion,
        prefersDarkScheme: a11yPrefersState.prefersDarkScheme
      },
      setA11yPrefersState: setA11yPrefersState
    }
  }, children);
};

var offScreenStyle = {
  border: 0,
  clip: 'rect(0 0 0 0)',
  height: '1px',
  margin: '-1px',
  overflow: 'hidden',
  whiteSpace: 'nowrap',
  padding: 0,
  width: '1px',
  position: 'absolute'
};
var A11yAnnouncer = function A11yAnnouncer() {
  var message = useAnnounceStore(function (state) {
    return state.message;
  });
  React.useEffect(function () {
    var mouseClickListener = function mouseClickListener(e) {
      var _window$document$acti;

      if ((_window$document$acti = window.document.activeElement) != null && _window$document$acti.getAttribute('r3f-a11y') && e.detail !== 0) {
        if (window.document.activeElement instanceof HTMLElement) {
          window.document.activeElement.blur();
        }
      }
    };

    window.addEventListener('click', mouseClickListener);
    return function () {
      window.removeEventListener('click', mouseClickListener);
    };
  });
  return React__default.createElement("div", {
    style: offScreenStyle,
    "aria-atomic": "true",
    "aria-live": "polite"
  }, message);
};

var A11yDebuger = function A11yDebuger(_ref) {
  _objectDestructuringEmpty(_ref);

  var _useState = React.useState(function () {
    return document.createElement('div');
  }),
      el = _useState[0];

  var _useState2 = React.useState({}),
      boundingStyle = _useState2[0],
      setBoundingStyle = _useState2[1];

  var _useState3 = React.useState({
    prefersDarkScheme: false,
    prefersReducedMotion: false
  }),
      debugState = _useState3[0],
      setDebugState = _useState3[1];

  var _useUserPreferences = useUserPreferences(),
      a11yPrefersState = _useUserPreferences.a11yPrefersState,
      setA11yPrefersState = _useUserPreferences.setA11yPrefersState;

  var domStructureRef = React.useRef(null);
  React.useEffect(function () {
    el.style.cssText = 'position:fixed;top:0;left:0;';
    el.setAttribute('aria-hidden', 'true');
    document.body.appendChild(el);
    setDebugState({
      prefersDarkScheme: a11yPrefersState.prefersDarkScheme,
      prefersReducedMotion: a11yPrefersState.prefersReducedMotion
    });

    var selectActiveEl = function selectActiveEl() {
      var _document$activeEleme;

      console.log('focused: ', document.activeElement);
      var r3fa11ydebugidref = (_document$activeEleme = document.activeElement) == null ? void 0 : _document$activeEleme.getAttribute('r3f-a11y-debug-id');

      if (r3fa11ydebugidref) {
        document.querySelectorAll('[r3fa11ydebugidref]').forEach(function (node) {
          //@ts-ignore
          node.style.color = null;
        });
        var refEl = document.querySelector('[r3fa11ydebugidref="' + r3fa11ydebugidref + '"]');

        if (refEl) {
          //@ts-ignore
          refEl.style.color = 'red';
        }
      }
    };

    console.log('enregistre ev');
    document.addEventListener('focus', selectActiveEl, true);
    var superinterval = window.setInterval(function () {
      var r3fPosId = 0; //@ts-ignore

      var elements = [];
      document.querySelectorAll('[r3f-a11y]').forEach(function (node) {
        node.setAttribute('r3f-a11y-debug-id', '' + r3fPosId); // let li = document.createElement('li');
        // li.innerHTML = node.tagName ;
        // //@ts-ignore
        // domStructureRef.current.appendChild(li);

        elements.push( //@ts-ignore
        React__default.createElement("li", {
          key: r3fPosId,
          r3fa11ydebugidref: r3fPosId
        }, node.tagName, React__default.createElement("button", {
          tabIndex: -1,
          onClick: function onClick() {
            console.log(node);
            var clientRect = node.getBoundingClientRect();
            setBoundingStyle({
              width: clientRect.width,
              height: clientRect.height,
              top: clientRect.top,
              left: clientRect.left
            });
          }
        }, "Show")));
        r3fPosId++;
      }); //@ts-ignore

      ReactDOM.render(React__default.createElement(React__default.Fragment, null, elements), domStructureRef.current);
    }, 2000);
    return function () {
      clearInterval(superinterval);
      ReactDOM.unmountComponentAtNode(el);
      console.log('remove ev');
      document.removeEventListener('focus', selectActiveEl, true);
    };
  }, [a11yPrefersState]); // @ts-ignore

  var handleChange = function handleChange(e) {
    // @ts-ignore
    setA11yPrefersState({
      prefersDarkScheme: e.target.name === 'prefersDarkScheme' ? e.target.checked : debugState.prefersDarkScheme,
      prefersReducedMotion: e.target.name === 'prefersReducedMotion' ? e.target.checked : debugState.prefersReducedMotion
    });
  };

  React.useLayoutEffect(function () {
    return void ReactDOM.render(React__default.createElement(React__default.Fragment, null, React__default.createElement("label", null, "Prefer dark mode", React__default.createElement("input", {
      type: "checkbox",
      name: "prefersDarkScheme",
      checked: debugState.prefersDarkScheme,
      onChange: handleChange
    })), React__default.createElement("label", null, "Prefer reduced motion", React__default.createElement("input", {
      type: "checkbox",
      name: "prefersReducedMotion",
      checked: debugState.prefersReducedMotion,
      onChange: handleChange
    })), React__default.createElement("h3", null, "R3F Dom order"), React__default.createElement("ul", {
      ref: domStructureRef
    }), React__default.createElement("div", {
      style: Object.assign({
        position: 'absolute',
        border: '1px solid white',
        borderRadius: '50%',
        background: 'linear-gradient( 45deg, rgb(70, 255, 60, 0.7), rgb(0, 64, 193, 0.7))',
        pointerEvents: 'none',
        transition: 'all 200ms ease'
      }, boundingStyle)
    })), el);
  });
  return React__default.createElement(React__default.Fragment, null);
};

exports.A11y = A11y;
exports.A11yAnnouncer = A11yAnnouncer;
exports.A11yDebuger = A11yDebuger;
exports.A11ySection = A11ySection;
exports.A11yUserPreferences = A11yUserPreferences;
exports.A11yUserPreferencesContext = A11yUserPreferencesContext;
exports.useA11y = useA11y;
exports.useUserPreferences = useUserPreferences;
//# sourceMappingURL=a11y.cjs.development.js.map
