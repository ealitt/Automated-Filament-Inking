"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("three");const e=(()=>{function e(t,e){this.mesh=t,this.iks=e||[],this._valid()}function r(e,r){t.Object3D.call(this),this.root=e,this.iks=r||[],this.matrix.copy(e.matrixWorld),this.matrixAutoUpdate=!1,this.sphereGeometry=new t.SphereGeometry(.25,16,8),this.targetSphereMaterial=new t.MeshBasicMaterial({color:new t.Color(16746632),depthTest:!1,depthWrite:!1,transparent:!0}),this.effectorSphereMaterial=new t.MeshBasicMaterial({color:new t.Color(8978312),depthTest:!1,depthWrite:!1,transparent:!0}),this.linkSphereMaterial=new t.MeshBasicMaterial({color:new t.Color(8947967),depthTest:!1,depthWrite:!1,transparent:!0}),this.lineMaterial=new t.LineBasicMaterial({color:new t.Color(16711680),depthTest:!1,depthWrite:!1,transparent:!0}),this._init()}return e.prototype={constructor:e,update:(()=>{const e=new t.Quaternion,r=new t.Vector3,o=new t.Vector3,i=new t.Vector3,n=new t.Vector3,s=new t.Vector3,a=new t.Quaternion,l=new t.Vector3,c=new t.Vector3,h=new t.Vector3;return function(){const t=this.mesh.skeleton.bones,p=this.iks,d=Math;for(let u=0,m=p.length;u<m;u++){const m=p[u],f=t[m.effector],x=t[m.target];r.setFromMatrixPosition(x.matrixWorld);const M=m.links,w=void 0!==m.iteration?m.iteration:1;for(let p=0;p<w;p++){let p=!1;for(let u=0,x=M.length;u<x;u++){const x=t[M[u].index];if(!1===M[u].enabled)break;const w=M[u].limitation,y=M[u].rotationMin,g=M[u].rotationMax;x.matrixWorld.decompose(s,a,l),a.invert(),i.setFromMatrixPosition(f.matrixWorld),n.subVectors(i,s),n.applyQuaternion(a),n.normalize(),o.subVectors(r,s),o.applyQuaternion(a),o.normalize();let k=o.dot(n);if(k>1?k=1:k<-1&&(k=-1),k=d.acos(k),!(k<1e-5)){if(void 0!==m.minAngle&&k<m.minAngle&&(k=m.minAngle),void 0!==m.maxAngle&&k>m.maxAngle&&(k=m.maxAngle),c.crossVectors(n,o),c.normalize(),e.setFromAxisAngle(c,k),x.quaternion.multiply(e),void 0!==w){let t=x.quaternion.w;t>1&&(t=1);const e=d.sqrt(1-t*t);x.quaternion.set(w.x*e,w.y*e,w.z*e,t)}void 0!==y&&x.rotation.setFromVector3(x.rotation.toVector3(h).max(y)),void 0!==g&&x.rotation.setFromVector3(x.rotation.toVector3(h).min(g)),x.updateMatrixWorld(!0),p=!0}}if(!p)break}}return this}})(),createHelper:function(){return new r(this.mesh,this.mesh.geometry.userData.MMD.iks)},_valid:function(){const t=this.iks,e=this.mesh.skeleton.bones;for(let r=0,o=t.length;r<o;r++){const o=t[r],i=e[o.effector],n=o.links;let s,a;s=i;for(let t=0,r=n.length;t<r;t++)a=e[n[t].index],s.parent!==a&&console.warn(`THREE.CCDIKSolver: bone ${s.name} is not the child of bone ${a.name}`),s=a}}},r.prototype=Object.assign(Object.create(t.Object3D.prototype),{constructor:r,updateMatrixWorld:(()=>{const e=new t.Matrix4,r=new t.Vector3;function o(t,e){return r.setFromMatrixPosition(t.matrixWorld).applyMatrix4(e)}function i(t,e,r,i){const n=o(r,i);t[3*e+0]=n.x,t[3*e+1]=n.y,t[3*e+2]=n.z}return function(r){const n=this.root;if(this.visible){let t=0;const r=this.iks,a=n.skeleton.bones;e.copy(n.matrixWorld).invert();for(let n=0,l=r.length;n<l;n++){const l=r[n],c=a[l.target],h=a[l.effector],p=this.children[t++],d=this.children[t++];p.position.copy(o(c,e)),d.position.copy(o(h,e));for(let r=0,i=l.links.length;r<i;r++){var s=a[l.links[r].index];this.children[t++].position.copy(o(s,e))}const u=this.children[t++],m=u.geometry.attributes.position.array;i(m,0,c,e),i(m,1,h,e);for(let t=0,r=l.links.length;t<r;t++){i(m,t+2,s=a[l.links[t].index],e)}u.geometry.attributes.position.needsUpdate=!0}}this.matrix.copy(n.matrixWorld),t.Object3D.prototype.updateMatrixWorld.call(this,r)}})(),_init:function(){const e=this,r=this.iks;function o(r){return new t.Line(function(e){const r=new t.BufferGeometry,o=new Float32Array(3*(2+e.links.length));return r.setAttribute("position",new t.BufferAttribute(o,3)),r}(r),e.lineMaterial)}for(let i=0,n=r.length;i<n;i++){const n=r[i];this.add(new t.Mesh(e.sphereGeometry,e.targetSphereMaterial)),this.add(new t.Mesh(e.sphereGeometry,e.effectorSphereMaterial));for(let r=0,o=n.links.length;r<o;r++)this.add(new t.Mesh(e.sphereGeometry,e.linkSphereMaterial));this.add(o(n))}}}),e})();exports.CCDIKSolver=e;
